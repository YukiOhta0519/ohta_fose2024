@inproceedings{mo2021existence,
  title={The existence and co-modifications of code clones within or across microservices},
  author={Mo, Ran and Zhao, Yang and Feng, Qiong and Li, Zengyang},
  booktitle={Proceedings of the 15th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)},
  pages={1--11},
  year={2021}
}

@inproceedings{amoroso2024dataset,
  author={d'Aragona, Dario Amoroso and Bakhtin, Alexander and Li, Xiaozhou and Su, Ruoyu and Adams, Lauren and Aponte, Ernesto and Boyle, Francis and Boyle, Patrick and Koerner, Rachel and Lee, Joseph and Tian, Fangchao and Wang, Yuqing and Nyyssölä, Jesse and Quevedo, Ernesto and Rahaman, Shahidur Md and Abdelfattah, Amr S. and Mäntylä, Mika and Cerny, Tomas and Taibi, Davide},
  booktitle={2024 IEEE/ACM 21st International Conference on Mining Software Repositories (MSR)}, 
  title={A Dataset of Microservices-based Open-Source Projects}, 
  year={2024},
  volume={},
  number={},
  pages={504-509},
  keywords={Industries;Pipelines;Microservice architectures;Manuals;Computer architecture;Benchmark testing;Software systems},
  doi={}}


@article{CCFinderSW,
  title={多様なプログラミング言語に対応可能なコードクローン検出ツール CCFinderSW},
  author={瀬村雄一 and 吉田則裕 and 崔恩瀞 and 井上克郎},
  journal={電子情報通信学会論文誌 D},
  volume={103},
  number={4},
  pages={215--227},
  year={2020},
yomi={semura},
  publisher={The Institute of Electronics, Information and Communication Engineers}
}

@article{2007ID619,
	author = {肥後 芳樹 and 吉田 則裕 and 楠本 真二 and 井上 克郎},
	journal = {情報処理学会論文誌},
    volume = {48},
    number = {2},
    pages = {811--822},
yomi={higo},
    year = {2007},
	title = {産学連携に基づいたコードクローン可視化手法の改良と実装},
}
@INPROCEEDINGS{zhao2022,
  author={Zhao, Yang and Mo, Ran and Zhang, Yao and Zhang, Siyuan and Xiong, Pu},
  booktitle={2022 IEEE/ACM 30th International Conference on Program Comprehension (ICPC)}, 
  title={Exploring and Understanding Cross-service Code Clones in Microservice Projects}, 
  year={2022},
  volume={},
  number={},
  pages={449-459},
  keywords={Location awareness;Codes;Systematics;Statistical analysis;Cloning;Microservice architectures;Computer architecture;Microservice;Code Clone;Code Analysis;Manual Analysis},
  doi={10.1145/3524610.3527925}}

@article{Honda2023,
  title={マイクロサービス開発入門者のための簡易な教材の開発},
  author={本田 澄 and 大八木 勇太朗 and 井垣 宏 and 福安 直樹},
  journal={第9回実践的IT教育シンポジウム論文集},
    yomi={honda},
  pages={83--92},
  year={2023},
  doi={10.11309/repit.2023.0_83}
}

@article{
コードクローン検出法,
author = "井上 克郎，神谷 年洋，楠本 真二",
yomi = "Katsuro Inoue",
title = "コードクローン検出法",
journal = "コンピュータソフトウェア",
volume = "18",
number = "5",
pages = "47-54",
year = "2001"
}

@article{クローンタイプ,
  title={Comparison and evaluation of code clone detection techniques and tools: A qualitative approach},
  author={Roy, Chanchal K. and Cordy, James R. and Koschke, Rainer},
  journal={Science of Computer Programming},
  volume={74},
  number={7},
  pages={470--495},
  year={2009},
  publisher={Elsevier North-Holland, Inc.}
}

@INPROCEEDINGS {7880509,
author = {A. Goon and Y. Wu and M. Matsushita and K. Inoue},
booktitle = {2017 IEEE 11th International Workshop on Software Clones (IWSC)},
title = {Evolution of code clone ratios throughout development history of open-source C and C++ programs},
year = {2017},
volume = {},
issn = {},
pages = {1-7},
abstract = {A code clone is a fragment of code which is duplicated throughout the source code of a project. Code clones have been shown to make a project less maintainable because all code clones will share potential bugs and problems. Unlike other code clone research, this study analyzes the code clone ratios over the entire development lifetime of three open-source projects written in C/C++ to understand code clone growth in software over development and potential developer habits which could affect this growth. The study utilizes CCFinderX and Git to detect clone metrics across development history. The results from each project show very low, stable ratios across development history, with the code clone ratios only fluctuating greatly during the beginning of development mostly and very little refactoring occurring. This study goes further into the potential cause of low ratios and different fluctuations at different periods of development.},
keywords = {cloning;measurement;maintenance engineering;history;open source software;computer bugs},
doi = {10.1109/IWSC.2017.7880509},
url = {https://doi.ieeecomputersociety.org/10.1109/IWSC.2017.7880509},
publisher = {IEEE Computer Society},
address = {Los Alamitos, CA, USA},
month = {feb}
}

@inproceedings{balalaie2016migrating,
  title={Migrating to cloud-native architectures using microservices: an experience report},
  author={Balalaie, Armin and Heydarnoori, Abbas and Jamshidi, Pooyan},
  booktitle={Advances in Service-Oriented and Cloud Computing: Workshops of ESOCC 2015, Taormina, Italy, September 15-17, 2015, Revised Selected Papers 4},
  pages={201--215},
  year={2016},
  organization={Springer}
}

@inproceedings{svajlenko2014evaluating,
  title={Evaluating modern clone detection tools},
  author={Svajlenko, Jeffrey and Roy, Chanchal K},
  booktitle={2014 IEEE international conference on software maintenance and evolution},
  pages={321--330},
  year={2014},
  organization={IEEE}
}

@inproceedings{WoC,
  author={Ma, Yuxing and Bogart, Chris and Amreen, Sadika and Zaretzki, Russell and Mockus, Audris},
  booktitle={2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR)}, 
  title={World of Code: An Infrastructure for Mining the Universe of Open Source VCS Data}, 
  year={2019},
  volume={},
  number={},
  pages={143-154},
  keywords={Software;Tools;Data mining;Ecosystems;Task analysis;Prototypes;Databases;software mining, software supply chain, software ecosystem},
  doi={10.1109/MSR.2019.00031}}

@ARTICLE {CCFinder,
author = {T. Kamiya and S. Kusumoto and K. Inoue},
journal = {IEEE Transactions on Software Engineering},
title = {CCFinder: A Multilinguistic Token-Based Code Clone Detection System for Large Scale Source Code},
year = {2002},
volume = {28},
number = {07},
issn = {1939-3520},
pages = {654-670},
abstract = {A code clone is a code portion in source files that is identical or similar to another. Since code clones are believed to reduce the maintainability of software, several code clone detection techniques and tools have been proposed. This paper proposes a new clone detection technique, which consists of the transformation of input source text and a token-by-token comparison. For its implementation with several useful optimization techniques, we have developed a tool, named CCFinder, which extracts code clones in C, C++, Java, COBOL, and other source files. As well, metrics for the code clones have been developed. In order to evaluate the usefulness of CCFinder and metrics, we conducted several case studies where we applied the new tool to the source code of JDK, FreeBSD, NetBSD, Linux, and many other systems. As a result, CCFinder has effectively found clones and the metrics have been able to effectively identify the characteristics of the systems. In addition, we have compared the proposed technique with other clone detection techniques.},
keywords = {code clone;duplicated code;case tool;metrics;maintenance.},
doi = {10.1109/TSE.2002.1019480},
publisher = {IEEE Computer Society},
address = {Los Alamitos, CA, USA},
month = {jul}
}

@article{HIGO2007985,
title = {Method and implementation for investigating code clones in a software system},
journal = {Information and Software Technology},
volume = {49},
number = {9},
pages = {985-998},
year = {2007},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2006.10.005},
url = {https://www.sciencedirect.com/science/article/pii/S0950584906001443},
author = {Yoshiki Higo and Toshihiro Kamiya and Shinji Kusumoto and Katsuro Inoue},
keywords = {Software maintenance, Code clone, Software understanding, Software metrics},
abstract = {Maintaining software systems is becoming more difficult as the size and complexity of software increase. One factor that complicates software maintenance is the presence of code clones. A code clone is a code fragment that has identical or similar code fragments to it in the source code. Code clones are introduced for various reasons such as reusing code by ‘copy and paste’. If modifying a code clone with many similar code fragments, we must consider whether to modify each of them. Especially for large-scale software, such a process is very complicated and expensive. In this paper, we propose methods of visualizing and featuring code clones to support their understanding in large-scale software. The methods have been implemented as a tool called Gemini, which has applied to an open source software system. Application results show the usefulness and capability of our system.}
}

@INPROCEEDINGS{DECKARD,
  author={Jiang, Lingxiao and Misherghi, Ghassan and Su, Zhendong and Glondu, Stephane},
  booktitle={29th International Conference on Software Engineering (ICSE'07)}, 
  title={DECKARD: Scalable and Accurate Tree-Based Detection of Code Clones}, 
  year={2007},
  volume={},
  number={},
  pages={96-105},
  keywords={Cloning;Robustness;Clustering algorithms;Software engineering;Fingerprint recognition;Programming profession;Application software;Euclidean distance;Java;Linux},
  doi={10.1109/ICSE.2007.30}}

@INPROCEEDINGS{astnn,
  author={Zhang, Jian and Wang, Xu and Zhang, Hongyu and Sun, Hailong and Wang, Kaixuan and Liu, Xudong},
  booktitle={2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE)}, 
  title={A Novel Neural Source Code Representation Based on Abstract Syntax Tree}, 
  year={2019},
  volume={},
  number={},
  pages={783-794},
  keywords={Syntactics;Cloning;Semantics;Neural networks;Task analysis;Binary trees;Natural languages;Abstract Syntax Tree, source code representation, neural network, code classification, code clone detection},
  doi={10.1109/ICSE.2019.00086}}